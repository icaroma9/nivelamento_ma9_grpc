# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import country_pb2 as country__pb2


class CountryInfoStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPartialCountries = channel.unary_unary(
            "/country.CountryInfo/GetPartialCountries",
            request_serializer=country__pb2.Page.SerializeToString,
            response_deserializer=country__pb2.CountryPagination.FromString,
        )
        self.SearchCountry = channel.unary_unary(
            "/country.CountryInfo/SearchCountry",
            request_serializer=country__pb2.CountryName.SerializeToString,
            response_deserializer=country__pb2.Country.FromString,
        )
        self.GetAllCountries = channel.unary_stream(
            "/country.CountryInfo/GetAllCountries",
            request_serializer=country__pb2.Empty.SerializeToString,
            response_deserializer=country__pb2.Country.FromString,
        )


class CountryInfoServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetPartialCountries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SearchCountry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetAllCountries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_CountryInfoServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetPartialCountries": grpc.unary_unary_rpc_method_handler(
            servicer.GetPartialCountries,
            request_deserializer=country__pb2.Page.FromString,
            response_serializer=country__pb2.CountryPagination.SerializeToString,
        ),
        "SearchCountry": grpc.unary_unary_rpc_method_handler(
            servicer.SearchCountry,
            request_deserializer=country__pb2.CountryName.FromString,
            response_serializer=country__pb2.Country.SerializeToString,
        ),
        "GetAllCountries": grpc.unary_stream_rpc_method_handler(
            servicer.GetAllCountries,
            request_deserializer=country__pb2.Empty.FromString,
            response_serializer=country__pb2.Country.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "country.CountryInfo", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class CountryInfo(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetPartialCountries(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/country.CountryInfo/GetPartialCountries",
            country__pb2.Page.SerializeToString,
            country__pb2.CountryPagination.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SearchCountry(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/country.CountryInfo/SearchCountry",
            country__pb2.CountryName.SerializeToString,
            country__pb2.Country.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetAllCountries(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/country.CountryInfo/GetAllCountries",
            country__pb2.Empty.SerializeToString,
            country__pb2.Country.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
